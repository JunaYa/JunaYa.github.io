<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[数据结构]]></title>
      <url>http://junaya.github.io/2016/10/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      <content type="text"><![CDATA[#数据结构 逻辑结构集合一组属性相同的元素的集合 线性结构一对一 树形结构一对多 图形结构多对多 存储结构顺序存储 数据元素存储在一片连续的存储区域用数组实现，逻辑位置和物理位置保持一致 链式存储 非连续的存储结构，它的逻辑位置和物理位置不是保持一致的。节点保存的是该节点的值和逻辑关系指针 索引存储 存储元素时还新增了一个索引列表，列表每一项包含关键字和数据元素存储地址或存储域的首地址 散列（哈希）存储 数据元素存放在一片连续的存储区域，每一个数据元素具体地址根据该数据元素的关键字的值通过散列（哈希）函数计算出来 线性表线性表由 n (n&gt;=0)个数据元素所构成的有限序列线性表属于线性结构 开始节点（元素）没有前驱 终端节点（元素）没有后继 中间节点（元素）只有一个前驱和一个后继 线性表的顺序存储-顺序表 顺序存储的线性表 , 用一组地址连续的存储单元一次存放线性表中的数据元素 特点 线性表中逻辑上相邻的元素在物理地址上也是相邻的 存储密度高，需要预先分配足够的存储空间 便于随机存取 不便插入／删除 （会一起大量的数据元素的移动） 用数组描述，顺序存储结构 线性表的链式存储-链表 概念：链表是一种物理存储单元上非连续，非顺序的数据结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。组成：一系列节点组成，可以在运行时动态生成（列表中每一个元素称为节点）节点（元素）组成：1，存储数据的数据域2，存储下一个节点（元素）的指针域时间复杂度1，插入／删除 O（1）2，查找一个节点／访问特定编号节点 O（n）优点克服数组需要需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。缺点 没有数组随机读取优点，链表由于增加了节点指针域，空间开销表较大。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。类型 1，单向链表 链表的方向是单向的。head 指针指向第一个成为表头节点，最后一个指向 null 2，双向链表 没个数据节点中有两个指针，分别指向直接后继和直接前驱，从任意节点可以访问它的前驱节点和后继节点 3，循环链表最后一个指针域指向头节点，整个链表形成一个环 栈 只从一端进一端出 汉诺塔先进后出（FILO） ／ 后进先出（LIFO） 顺序栈 以数组实现如栈需要注意栈是否已满出栈需要注意栈是否为空 链式栈 以单链表实现 应用 ： 分割符匹配 ， 大数相加 ， 表达式求值 ， 栈与递归问题 队列 从一端进从另一端出 ，排队买票先进先出（FIFO) 循环顺序对列 数组实现需要注意判断是否为空是否已满，已满可能是假满1）少用一个存储单元，当容量为 maxSize ，队列空时 front == rear , 队列满时 front == (rear +1)%maxSize2)设置一个标记为，flag 初始值为 0， 当入队成功 flag=1 ，当出队成功 flag = 0 ， 所以当 队为空时 front == rear &amp;&amp; flag ==0 , 队列满时 front == rear &amp;&amp; flag = 1;3）设置一个变量 num 当入队成功 num + 1 ,当出队成功 num - 1 ,队列为空时 num == 0 ,队列满时 num &gt; 0 链队 单链表实现注意出队时判断是否为null ， 优先级队列 根据数据元素的优先级排队]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[First Beijing]]></title>
      <url>http://junaya.github.io/2016/10/30/First-Beijing/</url>
      <content type="text"><![CDATA[春夏秋冬]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[格物致知]]></title>
      <url>http://junaya.github.io/2016/10/29/%E6%A0%BC%E7%89%A9%E8%87%B4%E7%9F%A5/</url>
      <content type="text"><![CDATA[大学之道，在明明德，在亲民，在止于至善。知止而后有定；定而后能静；静而后能安；安而后能虑；虑而后能得。物有本末，事有终始。知所先后，则近道矣。古之欲明明德于天下者，先治其国；欲治其国者，先齐其家； 欲齐其家者，先修其身；欲修其身者，先正其心；欲正其心者，先诚其意；欲诚其意者，先致其知；致知在格物。 物格而后知至；知至而后意诚；意诚而后心正；心正而后身修；身修而后家齐；家齐而后国治；国治而后天下平。 自天子以至于庶人，壹是皆以修身为本。其本乱而未治者否矣。其所厚者薄，而其所薄者厚，未之有也！ 这是一篇在大学语文课本中的文章，当时还背诵过，也真的背诵了，在老师面前，只是背诵了。前段时间在找工作中，每次回来先到图书馆去，看看知识点，然后再回来。在二楼的一进门的图书室，前排的书架上摆放的大多是古文之类的，在浏览的时候，看到了厚厚的大学.中庸这本书。翻开的第一眼就是，大学之道。。。然后就悄声读了一遍，突然就被打动了。打动了自己的当前的一个状态，对于学习以及工作等其他，感觉真实给了自己人生的一个警醒，或者惊醒。回首自己的一年多的工作，也回首自己这一路走来索受的教育以及自己所学掌握知识的一个程度，再是反省自己的一个学习态度，自我认可程度，以及工作实际的检验。 今年算是自己的本命年吧，自己姑且这样安慰以下自己，是自己能力不行，智商跟不上情商也不够用。在面试的时候就完全显露出来。其实自己觉得这段时间成长了不少，反正自己肯定是能扛下来自己这个锅，对安卓以及知识的一个真正追求和渴望现在才自我明白。自己到底想要的是什么，并且确定自己要怎么走接下来的道路。但是，对于父母，自己真是于心不忍，一直以来他们都还没有明白我的工作是什么，也怪我没有讲明白。这段时间扰的父母也是一直担心我的工作，更是担心我的以后。他们当然是希望我能有一个安稳的生活和工作，起码他们的希望就是像公务员那样的生活，才算是稳定的。但是啊，我也终于明白自己为什么一直抵触体制的原因，但是就在中秋回家，亲人们的建议，我还心动了，毕竟他们讲到了人生的全部的规划。而我，最终也决定自己的追求，自己的所想要，渴望，目标。只是要安慰父母，让他们不要担心自己。 在次期间迷茫了很多，真的很多，但是也在一次次鼓励自己要自己努力下去。期间工作一年的时间里，对于自己进步并不是很大。因为这一年间接的认识了很多佼佼者，比如晓锋，还有许建林。前几个月还跟晓锋发了邮件，并且很亲切认真的回我邮件了，后续还会跟他发邮件，还有啊他又开源了几个项目，初识他的时候也是通过开源项目 MeiZi 而认识他，阅读了他的所有文章，所以才对他很感兴趣，所以微博 GitHub 博客都会经常去看。许建林呢 就更有趣了， 参加 GDG 活动时认识的他，进去就跟他挨着坐着，感觉有点面熟，没认出来。后来他上去分享演讲时，才想起来，是他分享 RxJava 的主题。当时我就尴尬了，后来也去他的博客上看了他的文章，每一篇都很认真的写，很有专研劲儿，而且特别高产，谁让他是高材生呢。讲的有点偏了，以后可以写写认识的每一个人。 大学期间没有真正的学习数据结构，现在做了一段时间的程序开发，再回过头来看这些基础知识，就会想到再语言中怎么使用，再哪些场景中使用。比如面试中定会有问道 ArrayList 和 LinkedList 的知识，他们的实现一个是用顺序存储实现线性表数据的存储，LinkedList 是由链表存储实现线性表数据存储，两者的区别就是 用于数据的操作场景下的不同， ArrayList 实现随机存取方便，但是插入删除耗费。 LinkedList 方便插入和删除操作，但是随机取某一元素都要从头开始找。 这样我就明白为什么在安卓中，获取数据的时候要用List dataList = new ArrayList()&lt;&gt;; 的使用原因。 所以呢，格物致知， 就是理解事物的底层，一层层的刨析原理这样才能建起高楼。这道理从小就开始接受，但是一直没能真正的领悟，这真理还得自己体会领悟。所以给自己的目标就是，从基础开始，回炉再造。这也是阅读了 《Android 艺术开发探索》得出来的感悟，因为要走远必须要有扎实的基础。这就是我的格物致知。]]></content>
    </entry>

    
  
  
</search>
